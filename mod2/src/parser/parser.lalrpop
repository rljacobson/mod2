use mod2_abs::IString;
use mod2_lib::api::built_in::{
    NaturalNumber,
    Integer,
    Float,
    StringBuiltIn
};
use crate::{
  parser::ast::{
    AttributeAST,
    BxSortIdAST,
    BxSortSpecAST,
    BxTermAST,
    ConditionAST,
    EquationDeclarationAST,
    FunctorSortAST,
    ItemAST,
    MembershipDeclarationAST,
    ModuleAST,
    RuleDeclarationAST,
    SortDeclarationAST,
    SortIdAST,
    SortSpecAST,
    SymbolDeclarationAST,
    TermAST,
    VariableDeclarationAST,
  },
};

grammar;


// Lexer definitions

// Ignore patters: whitespace and comments
// See http://lalrpop.github.io/lalrpop/lexer_tutorial/001_lexer_gen.html#customizing-skipping-between-tokens
match {
    // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"\s*" => { },

    // Skip `// comments`
    // ToDo: Track row/columns for better error handling
    r"//[^\n\r]*[\n\r]*" => { },

    // Skip `/* comments */`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)\*/" => { },
    _
}

Identifier: IString = {
    <id: r#"[a-zA-Z][a-zA-Z_]*"#> => IString::from(id)
};

Float: Float = {
    <x: r#"(\d+\.\d*|\d*\.\d+)([eE][+-]?\d+)?"#> => {
            x.parse().unwrap()
        }
};

NaturalNumber: NaturalNumber = {
    <n: r#"\d+"#> => { n.parse().unwrap() }
};

StringLiteral: String = <s:r#""[a-z ]*""#> => s[1..s.len()-1].into();

AndOp            : () = { "/\\", "∧", "⋀" };
OrOp             : () = { "\\/", "∨", "⋁" };
ArrowOp          : () = "->";
SortOp           : () = ":";
RuleOp           : () = "=>";
EqualOp          : () = "=";
MatchOp          : () = ":=";
SymbolKeyword    : () = { "symbol",     "sym" };
VariableKeyword  : () = { "variable",   "var" };
RuleKeyword      : () = { "rule",       "rl" };
EquationKeyword  : () = { "equation",   "eq" };
MembershipKeyword: () = { "membership", "mb" };

// Grammar rules

// Macros

// Comma separated list with at least one element. Trailing comma is allowed.
/*
CommaList<T>: Vec<T> = {
 <mut v:(<T> ",")*> <e:T?> => match e {
     None => v,
     Some(e) => {
         v.push(e);
         v
     }
 }
};
*/

// Comma separated list with at least one element and no trailing comma.
CommaList<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T> => {
        v.push(e);
        v
    }
};

SortList      = CommaList<Identifier>;
TermList      = CommaList<Term>;
AttributeList = CommaList<Attribute>;

// Top-most rule.
pub Module: Box<ModuleAST> = {
    <items: Item*> => Box::new(ModuleAST { name: IString::from("Global"), items }),
};

Item: ItemAST = {
    <Submodule>             => ItemAST::Submodule(<>),
    <VariableDeclaration>   => ItemAST::VarDecl(Box::new(<>)),
    <SymbolDeclaration>     => ItemAST::SymDecl(Box::new(<>)),
    <SortDeclaration>       => ItemAST::SortDecl(Box::new(<>)),
    <RuleDeclaration>       => ItemAST::Rule(Box::new(<>)),
    <EquationDeclaration>   => ItemAST::Equation(Box::new(<>)),
    <MembershipDeclaration> => ItemAST::Membership(Box::new(<>))
};

Submodule: Box<ModuleAST> = {
    "mod" <name: Identifier> "{" <mut module: Module> "}" => {
        module.name = name;
        module
    },
};

Attribute: AttributeAST = {
    "ctor"             => AttributeAST::Constructor,
    "constructor"      => AttributeAST::Constructor,
    "assoc"            => AttributeAST::Associative,
    "associative"      => AttributeAST::Associative,
    "comm"             => AttributeAST::Commutative,
    "commutative"      => AttributeAST::Commutative,
    "id" "(" <pattern: Term> ")"       => AttributeAST::Identity(pattern),
    "identity" "(" <pattern: Term> ")" => AttributeAST::Identity(pattern),
    /*
    Unimplemented:
        Precedence, Gather, Format, Latex, Strategy, Memoized, Frozen, Config, Object, Message, MsgStatement,
        LeftIdentity, RightIdentity, Idempotent, Iterated, PolymorphicConstant, Polymorphic, Ditto
    Take no data:
        Associative, Commutative, Idempotent, Memoized, Constructor, Config, Object, Message, Iterated,
        PolymorphicConstant
    */

};

// Ex:
//      symbol f: Int -> Int -> Int;
SymbolDeclaration: SymbolDeclarationAST = {
    SymbolKeyword <name: Identifier> <sort_spec: (SortOp <SortSpec>)?> <attributes: AttributeSpec?> ";" => {
        SymbolDeclarationAST {
          name,
          attributes: attributes.unwrap_or_default(),
          sort_spec
        }
    }
};

// Ex:
//      variable X: Int;
VariableDeclaration: VariableDeclarationAST = {
    VariableKeyword <name: Identifier> <sort: (SortOp <SortId>)?> <attributes: AttributeSpec?> ";" => {
        VariableDeclarationAST {
          name,
          attributes: attributes.unwrap_or_default(),
          sort
        }
    }
};

SortDeclaration: SortDeclarationAST = {
    "sort" <sorts_lt: SortList> <maybe_sorts_gt: ("<" <SortList>)?> ";" => {
        SortDeclarationAST {
            sorts_lt,
            sorts_gt: maybe_sorts_gt.unwrap_or(vec![])
        }
    }
};

RuleDeclaration: RuleDeclarationAST = {
    RuleKeyword <lhs: Term> RuleOp <rhs: Term> <maybe_conditions: ConditionSpec?> ";" => {
        RuleDeclarationAST {
            lhs,
            rhs,
            conditions: maybe_conditions
        }
    }
};

EquationDeclaration: EquationDeclarationAST = {
    EquationKeyword <lhs: Term> EqualOp <rhs: Term> <maybe_conditions: ConditionSpec?> ";" => {
        EquationDeclarationAST {
            lhs,
            rhs,
            conditions: maybe_conditions
        }
    }
};

MembershipDeclaration: MembershipDeclarationAST = {
    MembershipKeyword <lhs: Term> SortOp <rhs: SortId> <maybe_conditions: ConditionSpec?> ";" => {
        MembershipDeclarationAST {
            lhs,
            rhs,
            conditions: maybe_conditions
        }
    }
};

// Term and Pattern definitions
Term: BxTermAST = {
    <string_literal: StringLiteral> => Box::new(TermAST::StringLiteral(string_literal)),
    <name: Identifier> "(" <tail: TermList> ")" => {
        Box::new(TermAST::Application { name, tail })
    },
    <name: Identifier> => Box::new(TermAST::Identifier(name)),
    <n: NaturalNumber> => Box::new(TermAST::NaturalNumber(n as NaturalNumber)),
    <x: Float> => Box::new(TermAST::Float(x)),
    "(" <Term> ")"
};

SortSpec: BxSortSpecAST = {
    <SortId> => {
        Box::new(SortSpecAST::Sort(<>))
    },
    <arg_sorts: SortId*> ArrowOp <target_sort: SortId> => {
        let functor = FunctorSortAST {
            arg_sorts,
            target_sort
        };
        Box::new(
            SortSpecAST::Functor(Box::new(functor))
        )
    }
};

SortId: BxSortIdAST = {
    <name: Identifier> => Box::new(SortIdAST(name))
};

AttributeSpec: Vec<AttributeAST> = {
    "[" <AttributeList> "]"
};

ConditionSpec: Vec<ConditionAST> = {
    "if" <mut v: (<Condition> AndOp)*> <c: Condition> => {
        v.push(c);
        v
    }
};

Condition: ConditionAST = {
    <lhs: Term> EqualOp <rhs: Term> => {
        ConditionAST::Equality { lhs, rhs }
    },

    <lhs: Term> MatchOp <rhs: Term> => {
        ConditionAST::Match { lhs, rhs }
    },

    <lhs: Term> SortOp <sort: SortId> => {
        ConditionAST::SortMembership { lhs, sort }
    },

    <lhs: Term> RuleOp <rhs: Term> => {
        ConditionAST::Rewrite { lhs, rhs }
    },

    <term: Term> => {
        ConditionAST::Boolean(term)
    }

};

//EqualityCondition: ConditionAST = {
//    <Term> EqualOp <Term> => {
//    }
//};
